name: Tickets
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/V1/tickets
    metadata:
      groupName: Tickets
      groupDescription: ''
      subgroup: Tickets
      subgroupDescription: ''
      title: 'Show all tickets.'
      description: 'Return all tickets. Results can be filtered and sorted.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      'filter[status]':
        name: 'filter[status]'
        description: 'Tickets status. Multiple values separated by comma supported. Supported status include A,C,H,X,O.'
        required: false
        example: 'filter[status]=A,C,H,X,O'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      'filter[title]':
        name: 'filter[title]'
        description: 'Tickets name. Asterisks will be replaced with supported DB wildcards.'
        required: false
        example: 'filter[title]=*support request*'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      'filter[createdAt]':
        name: 'filter[createdAt]'
        description: 'Tickets created date or date range separated by comma.'
        required: false
        example: 'filter[createdAt]=2020-01-01,2020-01-02'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      'filter[updatedAt]':
        name: 'filter[updatedAt]'
        description: 'Tickets updated date or date range separated by comma.'
        required: false
        example: 'filter[updatedAt]=2020-01-01,2020-01-02'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      sort:
        name: sort
        description: 'Sort all returned attributes. Sort direction can be specified by prepending a minus sign in front of the target field(s).'
        required: false
        example: 'sort=-status,title'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanQueryParameters:
      'filter[status]': 'filter[status]=A,C,H,X,O'
      'filter[title]': 'filter[title]=*support request*'
      'filter[createdAt]': 'filter[createdAt]=2020-01-01,2020-01-02'
      'filter[updatedAt]': 'filter[updatedAt]=2020-01-01,2020-01-02'
      sort: 'sort=-status,title'
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"type":"tickets","id":88,"attributes":{"title":"Ab quibusdam nemo voluptatem qui odit aut deleniti voluptas.","status":"A","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":3,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/3"}}}},"includes":{"type":"authors","id":3,"attributes":{"name":"Dr. Turner Nicolas","email":"morar.bessie@example.net"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/3"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/88"}},{"type":"tickets","id":62,"attributes":{"title":"Ab tenetur et cum ratione vero unde.","status":"C","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":9,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/9"}}}},"includes":{"type":"authors","id":9,"attributes":{"name":"Prof. Trystan Marvin","email":"wstiedemann@example.org"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/9"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/62"}},{"type":"tickets","id":52,"attributes":{"title":"Aliquam fugiat quia sunt officia ut minima.","status":"C","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":7,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/7"}}}},"includes":{"type":"authors","id":7,"attributes":{"name":"Jovan Wehner","email":"onie.kub@example.org"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/7"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/52"}},{"type":"tickets","id":78,"attributes":{"title":"Asperiores atque tenetur alias id velit incidunt.","status":"X","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":9,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/9"}}}},"includes":{"type":"authors","id":9,"attributes":{"name":"Prof. Trystan Marvin","email":"wstiedemann@example.org"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/9"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/78"}},{"type":"tickets","id":96,"attributes":{"title":"At explicabo aliquam doloribus.","status":"A","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":10,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/10"}}}},"includes":{"type":"authors","id":10,"attributes":{"name":"Prof. Fernando Romaguera PhD","email":"kadin09@example.com"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/10"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/96"}},{"type":"tickets","id":86,"attributes":{"title":"At soluta occaecati doloremque occaecati sit corrupti modi.","status":"H","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":8,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/8"}}}},"includes":{"type":"authors","id":8,"attributes":{"name":"Nathanial Fadel","email":"stiedemann.rocky@example.org"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/8"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/86"}},{"type":"tickets","id":1,"attributes":{"title":"Aut et magnam consequatur ut veniam eos.","status":"A","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":6,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/6"}}}},"includes":{"type":"authors","id":6,"attributes":{"name":"Marcia Metz","email":"ruthie66@example.net"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/6"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/1"}},{"type":"tickets","id":55,"attributes":{"title":"Aut sint ipsa ea.","status":"H","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":2,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/2"}}}},"includes":{"type":"authors","id":2,"attributes":{"name":"Rosemary Parker","email":"towne.alan@example.com"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/2"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/55"}},{"type":"tickets","id":15,"attributes":{"title":"Aut sit at dicta esse blanditiis qui.","status":"A","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":2,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/2"}}}},"includes":{"type":"authors","id":2,"attributes":{"name":"Rosemary Parker","email":"towne.alan@example.com"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/2"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/15"}},{"type":"tickets","id":85,"attributes":{"title":"Aut vero accusantium sunt perferendis autem.","status":"X","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":4,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/4"}}}},"includes":{"type":"authors","id":4,"attributes":{"name":"Dr. Keira Jerde","email":"brown.dylan@example.net"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/4"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/85"}}],"links":{"first":"http:\/\/localhost:8000\/api\/V1\/tickets?page=1","last":"http:\/\/localhost:8000\/api\/V1\/tickets?page=11","prev":null,"next":"http:\/\/localhost:8000\/api\/V1\/tickets?page=2"},"meta":{"current_page":1,"from":1,"last_page":11,"links":[{"url":null,"label":"&laquo; Previous","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=1","label":"1","active":true},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=2","label":"2","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=3","label":"3","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=4","label":"4","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=5","label":"5","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=6","label":"6","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=7","label":"7","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=8","label":"8","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=9","label":"9","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=10","label":"10","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=11","label":"11","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/tickets?page=2","label":"Next &raquo;","active":false}],"path":"http:\/\/localhost:8000\/api\/V1\/tickets","per_page":10,"to":10,"total":109}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 2|VM1zTltTltTE6rTGN7BpAum59qwu7YYN39hiNBpR4637810a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/V1/tickets
    metadata:
      groupName: Tickets
      groupDescription: ''
      subgroup: Tickets
      subgroupDescription: ''
      title: 'Create Ticket'
      description: 'Create a new ticket for a specified author. Authors logged in can only save tickets belonging to themselves. Admins have full privileges and can save tickets for any author.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      data:
        name: data
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes:
        name: data.attributes
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.relationships:
        name: data.relationships
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.relationships.author:
        name: data.relationships.author
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.relationships.author.data:
        name: data.relationships.author.data
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.title:
        name: data.attributes.title
        description: 'The title of the ticket. Must not be greater than 255 characters.'
        required: true
        example: 'Support Request'
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.description:
        name: data.attributes.description
        description: 'The description of the ticket. Must not be greater than 255 characters.'
        required: true
        example: 'New ticket for support.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.status:
        name: data.attributes.status
        description: 'The status of the ticket.'
        required: true
        example: A
        type: string
        enumValues:
          - A
          - C
          - H
          - X
          - O
        exampleWasSpecified: false
        custom: []
      data.relationships.author.data.id:
        name: data.relationships.author.data.id
        description: 'The authors id related to the ticket.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      data:
        attributes:
          title: 'Support Request'
          description: 'New ticket for support.'
          status: A
        relationships:
          author:
            data:
              id: 1
    fileParameters: []
    responses:
      -
        status: 201
        content: |
          {
              "data": {
                  "type": "tickets",
                  "id": 223,
                  "attributes": {
                      "title": "New Ticket",
                      "status": "A",
                      "createdAt": "2024-07-28T11:21:18.000000Z",
                      "updatedAt": "2024-07-28T11:21:18.000000Z"
                  },
                  "relationships": {
                      "author": {
                          "data": {
                              "type": "Author",
                              "id": 2,
                              "links": {
                                  "self": "http://localhost:8000/api/V1/authors/2"
                              }
                          }
                      }
                  },
                  "links": {
                      "self": "http://localhost:8000/api/V1/tickets/223"
                  }
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 2|VM1zTltTltTE6rTGN7BpAum59qwu7YYN39hiNBpR4637810a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/V1/tickets/{id}'
    metadata:
      groupName: Tickets
      groupDescription: ''
      subgroup: Tickets
      subgroupDescription: ''
      title: 'Get Ticket'
      description: 'Return the specified ticket.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the ticket.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"type":"tickets","id":1,"attributes":{"title":"Aut et magnam consequatur ut veniam eos.","description":"Sed cupiditate qui blanditiis voluptatem.","status":"A","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":6,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/6"}}}},"includes":{"type":"authors","id":6,"attributes":{"name":"Marcia Metz","email":"ruthie66@example.net"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/6"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/1"}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 2|VM1zTltTltTE6rTGN7BpAum59qwu7YYN39hiNBpR4637810a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/V1/tickets/{id}'
    metadata:
      groupName: Tickets
      groupDescription: ''
      subgroup: Tickets
      subgroupDescription: ''
      title: 'Update Ticket'
      description: 'Update the specified ticket. Authors logged in can only update tickets belonging to themselves. Admins have full privileges and can update tickets belonging to any author.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the ticket.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      data:
        name: data
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes:
        name: data.attributes
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.title:
        name: data.attributes.title
        description: 'Must not be greater than 255 characters.'
        required: false
        example: bjtdlxrqekclvgflxnrea
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.description:
        name: data.attributes.description
        description: 'Must not be greater than 255 characters.'
        required: false
        example: 'Reiciendis est ea ea voluptate.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.status:
        name: data.attributes.status
        description: ''
        required: true
        example: H
        type: string
        enumValues:
          - A
          - C
          - H
          - X
          - O
        exampleWasSpecified: false
        custom: []
      data.relationships:
        name: data.relationships
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.relationships.author:
        name: data.relationships.author
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.relationships.author.data:
        name: data.relationships.author.data
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.relationships.author.data.id:
        name: data.relationships.author.data.id
        description: ''
        required: true
        example: 8
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      data:
        attributes:
          title: bjtdlxrqekclvgflxnrea
          description: 'Reiciendis est ea ea voluptate.'
          status: H
        relationships:
          author:
            data:
              id: 8
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "type": "tickets",
              "id": 4,
              "attributes": {
                  "title": "Patch Tickets",
                  "status": "A",
                  "createdAt": "2024-07-27T10:38:37.000000Z",
                  "updatedAt": "2024-07-28T11:36:51.000000Z"
              },
              "relationships": {
                  "author": {
                      "data": {
                          "type": "Author",
                          "id": 1,
                          "links": {
                              "self": "http://localhost:8000/api/V1/authors/1"
                          }
                      }
                  }
              },
              "includes": {
                  "type": "authors",
                  "id": 1,
                  "attributes": {
                      "name": "Dr. Delta Dickinson",
                      "email": "pjacobi@example.com",
                      "emailVerifiedAt": "2024-07-27T10:38:37.000000Z",
                      "createdAt": "2024-07-27T10:38:37.000000Z",
                      "updatedAt": "2024-07-27T10:38:37.000000Z"
                  },
                  "links": {
                      "self": "http://localhost:8000/api/V1/authors/1"
                  }
              },
              "links": {
                  "self": "http://localhost:8000/api/V1/tickets/4"
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 2|VM1zTltTltTE6rTGN7BpAum59qwu7YYN39hiNBpR4637810a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/V1/tickets/{id}'
    metadata:
      groupName: Tickets
      groupDescription: ''
      subgroup: Tickets
      subgroupDescription: ''
      title: 'Delete Ticket'
      description: 'Delete the specified ticket. Authors logged in can only delete tickets belonging to themselves. Admins have full privileges and can delete tickets belonging to any author.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the ticket.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "message": "Deleted successfully.",
              "status": 200,
              "data": []
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 2|VM1zTltTltTE6rTGN7BpAum59qwu7YYN39hiNBpR4637810a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/V1/authors/{author_id}/tickets'
    metadata:
      groupName: Tickets
      groupDescription: ''
      subgroup: 'Author Tickets'
      subgroupDescription: ''
      title: 'Get Authors Tickets'
      description: 'Return all tickets belonging to the specified author. Results can be filtered and sorted.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      author_id: 1
    queryParameters:
      'filter[status]':
        name: 'filter[status]'
        description: 'Tickets status. Multiple values separated by comma supported. Supported status include A,C,H,X,O.'
        required: false
        example: 'filter[status]=A,C,H,X,O'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      'filter[title]':
        name: 'filter[title]'
        description: 'Tickets name. Asterisks will be replaced with supported DB wildcards.'
        required: false
        example: 'filter[title]=*support request*'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      'filter[createdAt]':
        name: 'filter[createdAt]'
        description: 'Tickets created date or date range separated by comma.'
        required: false
        example: 'filter[createdAt]=2020-01-01,2020-01-02'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      'filter[updatedAt]':
        name: 'filter[updatedAt]'
        description: 'Tickets updated date or date range separated by comma.'
        required: false
        example: 'filter[updatedAt]=2020-01-01,2020-01-02'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      sort:
        name: sort
        description: 'Sort all returned attributes. Sort direction can be specified by prepending a minus sign in front of the target field(s).'
        required: false
        example: 'sort=-status,title'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanQueryParameters:
      'filter[status]': 'filter[status]=A,C,H,X,O'
      'filter[title]': 'filter[title]=*support request*'
      'filter[createdAt]': 'filter[createdAt]=2020-01-01,2020-01-02'
      'filter[updatedAt]': 'filter[updatedAt]=2020-01-01,2020-01-02'
      sort: 'sort=-status,title'
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[{"type":"tickets","id":81,"attributes":{"title":"Doloremque placeat voluptatum ducimus ut similique fuga.","status":"X","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/81"}},{"type":"tickets","id":17,"attributes":{"title":"Dolores reiciendis et voluptatum cumque numquam quam et.","status":"A","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/17"}},{"type":"tickets","id":77,"attributes":{"title":"Doloribus aut fugiat et magni cupiditate.","status":"C","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/77"}},{"type":"tickets","id":58,"attributes":{"title":"Est similique sed optio.","status":"O","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/58"}},{"type":"tickets","id":12,"attributes":{"title":"Et voluptatibus voluptates autem dolore voluptates.","status":"X","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/12"}},{"type":"tickets","id":44,"attributes":{"title":"Facere aliquam architecto expedita error sunt.","status":"X","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/44"}},{"type":"tickets","id":22,"attributes":{"title":"Iusto nam voluptates id quidem dolores ratione velit.","status":"O","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/22"}},{"type":"tickets","id":82,"attributes":{"title":"Officia non repellat quia totam laboriosam quas.","status":"A","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/82"}},{"type":"tickets","id":84,"attributes":{"title":"Sit nesciunt doloremque quia quisquam molestiae nisi.","status":"C","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/84"}},{"type":"tickets","id":10,"attributes":{"title":"Soluta voluptatem vel et doloremque harum.","status":"A","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"relationships":{"author":{"data":{"type":"Author","id":1,"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}}}},"includes":{"type":"authors","id":1,"attributes":{"name":"Prof. Rogelio Wilderman","email":"hermina.gulgowski@example.com","emailVerifiedAt":"2024-07-28T11:50:47.000000Z","createdAt":"2024-07-28T11:50:47.000000Z","updatedAt":"2024-07-28T11:50:47.000000Z"},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/authors\/1"}},"links":{"self":"http:\/\/localhost:8000\/api\/V1\/tickets\/10"}}],"links":{"first":"http:\/\/localhost:8000\/api\/V1\/authors\/1\/tickets?page=1","last":"http:\/\/localhost:8000\/api\/V1\/authors\/1\/tickets?page=2","prev":null,"next":"http:\/\/localhost:8000\/api\/V1\/authors\/1\/tickets?page=2"},"meta":{"current_page":1,"from":1,"last_page":2,"links":[{"url":null,"label":"&laquo; Previous","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/authors\/1\/tickets?page=1","label":"1","active":true},{"url":"http:\/\/localhost:8000\/api\/V1\/authors\/1\/tickets?page=2","label":"2","active":false},{"url":"http:\/\/localhost:8000\/api\/V1\/authors\/1\/tickets?page=2","label":"Next &raquo;","active":false}],"path":"http:\/\/localhost:8000\/api\/V1\/authors\/1\/tickets","per_page":10,"to":10,"total":12}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 2|VM1zTltTltTE6rTGN7BpAum59qwu7YYN39hiNBpR4637810a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/V1/authors/{author_id}/tickets'
    metadata:
      groupName: Tickets
      groupDescription: ''
      subgroup: 'Author Tickets'
      subgroupDescription: ''
      title: 'Create Author Ticket'
      description: 'Create a new ticket for the specified author. Authors logged in can only save tickets belonging to themselves. Admins have full privileges and can save tickets for any author.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      author_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      data:
        name: data
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes:
        name: data.attributes
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.title:
        name: data.attributes.title
        description: 'Must not be greater than 255 characters.'
        required: true
        example: aaurwpohuisphoqsa
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.description:
        name: data.attributes.description
        description: 'Must not be greater than 255 characters.'
        required: true
        example: 'Similique omnis error laborum.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.status:
        name: data.attributes.status
        description: ''
        required: true
        example: H
        type: string
        enumValues:
          - A
          - C
          - H
          - X
          - O
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      data:
        attributes:
          title: aaurwpohuisphoqsa
          description: 'Similique omnis error laborum.'
          status: H
    fileParameters: []
    responses:
      -
        status: 201
        content: |
          {
              "data": {
                  "type": "tickets",
                  "id": 223,
                  "attributes": {
                      "title": "New Ticket",
                      "status": "A",
                      "createdAt": "2024-07-28T11:21:18.000000Z",
                      "updatedAt": "2024-07-28T11:21:18.000000Z"
                  },
                  "relationships": {
                      "author": {
                          "data": {
                              "type": "Author",
                              "id": 2,
                              "links": {
                                  "self": "http://localhost:8000/api/V1/authors/2"
                              }
                          }
                      }
                  },
                  "links": {
                      "self": "http://localhost:8000/api/V1/tickets/223"
                  }
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 2|VM1zTltTltTE6rTGN7BpAum59qwu7YYN39hiNBpR4637810a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/V1/authors/{author_id}/tickets/{id}'
    metadata:
      groupName: Tickets
      groupDescription: ''
      subgroup: 'Author Tickets'
      subgroupDescription: ''
      title: 'Update Authors Ticket'
      description: 'Update the specified authors ticket. Authors logged in can only update tickets belonging to themselves. Admins have full privileges and can update tickets belonging to any author.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      id:
        name: id
        description: 'The ID of the ticket.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      author_id: 1
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      data:
        name: data
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes:
        name: data.attributes
        description: ''
        required: true
        example: []
        type: object
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.title:
        name: data.attributes.title
        description: 'Must not be greater than 255 characters.'
        required: false
        example: zdihalry
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.description:
        name: data.attributes.description
        description: 'Must not be greater than 255 characters.'
        required: false
        example: 'Et qui ullam quis omnis.'
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      data.attributes.status:
        name: data.attributes.status
        description: ''
        required: true
        example: H
        type: string
        enumValues:
          - A
          - C
          - H
          - X
          - O
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      data:
        attributes:
          title: zdihalry
          description: 'Et qui ullam quis omnis.'
          status: H
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "type": "tickets",
              "id": 4,
              "attributes": {
                  "title": "Patch Tickets",
                  "status": "A",
                  "createdAt": "2024-07-27T10:38:37.000000Z",
                  "updatedAt": "2024-07-28T11:36:51.000000Z"
              },
              "relationships": {
                  "author": {
                      "data": {
                          "type": "Author",
                          "id": 1,
                          "links": {
                              "self": "http://localhost:8000/api/V1/authors/1"
                          }
                      }
                  }
              },
              "includes": {
                  "type": "authors",
                  "id": 1,
                  "attributes": {
                      "name": "Dr. Delta Dickinson",
                      "email": "pjacobi@example.com",
                      "emailVerifiedAt": "2024-07-27T10:38:37.000000Z",
                      "createdAt": "2024-07-27T10:38:37.000000Z",
                      "updatedAt": "2024-07-27T10:38:37.000000Z"
                  },
                  "links": {
                      "self": "http://localhost:8000/api/V1/authors/1"
                  }
              },
              "links": {
                  "self": "http://localhost:8000/api/V1/tickets/4"
              }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 2|VM1zTltTltTE6rTGN7BpAum59qwu7YYN39hiNBpR4637810a'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/V1/authors/{author_id}/tickets/{id}'
    metadata:
      groupName: Tickets
      groupDescription: ''
      subgroup: 'Author Tickets'
      subgroupDescription: ''
      title: 'Delete Authors Ticket.'
      description: 'Delete the specified authors ticket. Authors logged in can only delete tickets belonging to themselves. Admins have full privileges and can delete tickets belonging to any author.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      author_id:
        name: author_id
        description: 'The ID of the author.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      id:
        name: id
        description: 'The ID of the ticket.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      author_id: 1
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |
          {
              "message": "Deleted successfully.",
              "status": 200,
              "data": []
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 2|VM1zTltTltTE6rTGN7BpAum59qwu7YYN39hiNBpR4637810a'
    controller: null
    method: null
    route: null
    custom: []
